// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

 /**
  * A instructions
  * 0nnn nnnn nnnn nnnn
  * 0 is the opcode for the instruction. 
  * the 15 bit word n tells us which M we're addressing
  * and the value stored in register A
  *
  * D instructions
  * 111a cccc ccdd djjj
  * the MSB 1 is our opcode. 
  *
  * (a cccc cc) is our comparison section
  *     the c bits are the ALU control inputs
  *     the a bit dictates whether we input the A register or
  *     the M register into the ALU
  *
  * (dd d) select our destinations
  * d2 tells us our destination is A
  * d1 tells us our destination is D
  * d0 tells us our destination is M
  *
  * jjj dictates where we are jumping
  * if j0 then jump if result > 0
  * if j1 then jump if result = 0
  * if j2 then jump if result < 0
  */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // output of ALU and instruction are passed through a mux
    // that goes into register A
    Not(in=instruction[15], out=notOpCode);
    Mux16(a=ALUout, b=instruction, sel=notOpCode, out=mux1out);
    // A register is loaded depending on the opcode of the instruction
    // and the corresponding destination bit
    Or(a=notOpCode, b=instruction[5], out=Aload);
    ARegister(in=mux1out, load=Aload, out[0..14]=addressM, out=Aout);
    // A value is loaded into y depending on the a bit
    Mux16(a=Aout, b=inM, sel=instruction[12], out=mux2out);
    // D register is updated depending on the corresponding destination bit
    And(a=instruction[4], b=instruction[15], out=Dload);
    DRegister(in=ALUout, load=Dload, out=Dout);
    // ALU is fed the control bits and operations are performed
    ALU(x=Dout, y=mux2out, zx=instruction[11], nx=instruction[10],
    zy=instruction[9], ny=instruction[8], f=instruction[7], 
    no=instruction[6], out=ALUout, out=outM, zr=ALUzero, ng=ALUless);
    // Conditions to load value in A to PC, depends on the zero and less than outputs
    // of the ALU
    And(a=instruction[1], b=ALUzero, out=JEQ);
    // Set ALUmore bit. If the output of the ALU is not zero and not less than zero,
    // it is greater than zero
    Not(in=ALUless, out=temp1);
    Xor(a=ALUzero, b=temp1, out=ALUmore);
    And(a=instruction[0], b=ALUmore, out=JGT);
    And(a=instruction[2], b=ALUless, out=JLT);
    Or(a=JEQ, b=JGT, out=jump1);
    Or(a=jump1, b=JLT, out=jump2);
    // If opcode is not 1, nothing should be loaded into PC
    And(a=jump2, b=instruction[15], out=PCload);
    // PC is either loaded or not, and incrementing input is always set to 1
    PC(in=Aout, load=PCload, inc=true, reset=reset, out[0..14]=pc);
    // writeM output depends on the corresponding destination bit
    // assuming the instruction is a C-type (opcode is 1)
    And(a=instruction[15], b=instruction[3], out=writeM);
}